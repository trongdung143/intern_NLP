### Báo cáo Mô tả Giải pháp

#### Quy trình
1. **Thu thập dữ liệu**: Dữ liệu được thu thập từ các tệp PDF trong thư mục `resumes/` và được chuyển đổi sang định dạng văn bản bằng script `pdf_to_txt.py`.
2. **Xử lý dữ liệu**: Dữ liệu văn bản được làm sạch và tiền xử lý bằng script `processing_data.py`. Các bước bao gồm loại bỏ ký tự đặc biệt, chuẩn hóa văn bản, và phân loại thông tin.
3. **Huấn luyện mô hình**: Mô hình NLP được huấn luyện bằng script `train.py`, sử dụng dữ liệu đã xử lý. Các thông số mô hình được lưu trong thư mục `model/`.
4. **Dự đoán**: Script `predict.py` được sử dụng để dự đoán thông tin từ các văn bản mới dựa trên mô hình đã huấn luyện.
5. **API**: Một API được triển khai qua script `api.py` để cung cấp giao diện cho việc truy cập và sử dụng mô hình.

#### Thuật toán
- **Xử lý ngôn ngữ tự nhiên (NLP)**: Sử dụng thư viện như SpaCy để phân tích cú pháp, nhận diện thực thể, và gán nhãn.
- **Mô hình học máy**: Áp dụng các mô hình như CRF hoặc Transformer-based (ví dụ: BERT) để trích xuất thông tin từ văn bản.
- **Tiền xử lý dữ liệu**: Sử dụng các kỹ thuật như stemming, lemmatization, và loại bỏ stop words.

#### Vấn đề còn lại
1. **Chất lượng dữ liệu**: Một số tệp PDF có định dạng không chuẩn, dẫn đến lỗi khi chuyển đổi sang văn bản.
2. **Hiệu suất mô hình**: Mô hình có thể chưa đạt độ chính xác cao đối với các trường hợp phức tạp.
3. **Tích hợp API**: Cần tối ưu hóa API để xử lý yêu cầu lớn hơn trong thời gian thực.

#### Ý tưởng cải tiến
1. **Cải thiện tiền xử lý**: Áp dụng các kỹ thuật OCR tiên tiến để xử lý các tệp PDF không chuẩn.
2. **Tăng cường mô hình**: Sử dụng các mô hình tiên tiến hơn như GPT hoặc fine-tuning BERT để cải thiện độ chính xác.
3. **Mở rộng chức năng API**: Tích hợp thêm các tính năng như phân tích cảm xúc hoặc phân loại văn bản.
4. **Tự động hóa**: Xây dựng pipeline tự động từ thu thập dữ liệu đến triển khai mô hình.

Báo cáo này cung cấp cái nhìn tổng quan về giải pháp hiện tại và các hướng cải tiến tiềm năng.
